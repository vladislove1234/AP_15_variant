openapi: 3.0.3
info: 
  title:  Pharmacy API
  version: 0.0.1
servers:
- url: https://virtserver.swaggerhub.com/Pharmacy/0.0.1
tags:
  - name: medicine
    description: Everything about medicine
  - name: pharmacy
    description: Access to Pharmacy orders
  - name: user
    description: Operations about user or pharmacist
paths:
  /medicine:
    post:
      tags:
        - medicine
      summary: Add a new medicine to the Pharmacy
      description: Add a new medicine to the Pharmacy. This can only be done pharmacist.
      operationId: addMedicine
      requestBody:
        description: Create a new medicine in the Pharmacy
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/medicine'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/medicine'
        '405':
          description: Invalid input
      security:
      - pharmacist_auth:
        - write:user
  /medicine/{Id}:
    get:
      tags:
        - medicine
      summary: Find medicine by ID
      description: Returns a single medicine
      operationId: getMedicineById
      parameters:
        - name: Id
          in: path
          description: ID of medicine to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/medicine'
        '400':
          description: Invalid ID supplied
        '404':
          description: Medicine not found
      security:
      - user_auth:
        - write:user
    put:
      tags:
        - medicine
      summary: Update medicine by ID
      description: This can only be done by the logged in pharmacist.
      operationId: updatemedicine
      parameters:
        - name: Id
          in: path
          description: Id that need to be update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent medicine in the Pharmacy
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/medicine'
      responses:
        default:
          description: successful operation
      security:
      - pharmacist_auth:
        - write:user

    delete:
      tags:
        - medicine
      summary: Deletes a medicine
      description: delete a medicine
      operationId: deleteMedicine
      parameters:
        - name: Id
          in: path
          description: Medicine id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid medicine Id
      security:
      - pharmacist_auth:
        - write:user

  /pharmacy/order:
    post:
      tags:
        - pharmacy
      summary: Place an order for a medicine
      description: Place a new order in the pharmcy
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
      security:
      - user_auth:
        - write:user
  /pharmacy/order/{Id}:
    get:
      tags:
        - pharmacy
      summary: Find purchase order by ID
      operationId: getOrderById
      parameters:
        - name: Id
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
      - user_auth:
        - write:user
    delete:
      tags:
        - pharmacy
      summary: Delete purchase order by ID
      operationId: deleteOrder
      parameters:
        - name: Id
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      security:
      - user_auth:
        - write:user
  /pharmacy/demand:
    post:
      tags:
        - pharmacy
      summary: Add medicine to demand
      operationId: addDemand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/demand'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/demand'
        '405':
          description: Invalid input
      security:
      - user_auth:
        - write:user
    get:
      tags:
        - pharmacy
      summary: Find medicines
      description: Returns a medicines
      operationId: getDemand
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/demand'
      security:
      - pharmacist_auth:
        - write:user
      - user_auth:
        - write:user
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '405':
          description: Invalid input

  /user/login:
    get:
      tags:
        - user
      summary: login of the user or pharmacist into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user or pharmacist session
      description: 'This can only be done by the logged in user or pharmacist.'
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      security:
      - pharmacist_auth:
        - write:user
      - user_auth:
        - write:user
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: 'This can only be done by the logged in user or pharmacist.'
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
      - pharmacist_auth:
        - write:user
      - user_auth:
        - write:user
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user or pharmacist.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: User that need to be Update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the pharmcy
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
      - user_auth:
        - write:user
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '404':
          description: User not found
      security:
      - pharmacist_auth:
        - write:user
      - user_auth:
        - write:user
components:
  schemas:
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          format: int64
          example: 1
    User:
      type: object
      properties:
        UserInfo:
          $ref: '#/components/schemas/UserInfo'
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    medicine:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: analgin
        price:
          type: integer
          example: 150
        description:
          type: string
          description: medicine description
    mass_medicine:
      type: object
      properties:
        name:
          type: string
          example: analgin
        quantity:
          type: integer
          format: int32
          example: 7
        availability:
          type: boolean
          example: true
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        MedicineId:
          type: integer
          format: int64
          example: 198772
        UserId:
          type: integer
          format: int64
          example: 56162
        quantity:
          type: integer
          format: int32
          example: 7
        price:
          type: integer
          example: 150
    demand:
      type: object
      properties:
        name:
          type: string
          example: analgin
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://Pharmacy.swagger.io/oauth/authorize
          scopes:
            write:orders: manage your orders
            read:orders: read your orders
            write:demand: manage demand
    pharmacist_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://Pharmacy.swagger.io/oauth/authorize
          scopes:
            write:ticket: manage medicine